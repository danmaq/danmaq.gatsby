{"version":3,"sources":["webpack:///path---ja-blog-2003-12-09-具体的なウェイトの捕り方-5992929bb5c3fd93cd24.js","webpack:///./.cache/json/ja-blog-2003-12-09-具体的なウェイトの捕り方.json"],"names":["webpackJsonp","3668","module","exports","data","markdownRemark","html","frontmatter","cover","date","strDate","title","pathContext","path","langKey"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,8pBAA0OC,aAA4cC,MAAA,KAAAC,KAAA,4BAAAC,QAAA,YAAAC,MAAA,kBAA+FC,aAAgBC,KAAA,oCAAAC,QAAA","file":"path---ja-blog-2003-12-09-具体的なウェイトの捕り方-5992929bb5c3fd93cd24.js","sourcesContent":["webpackJsonp([239825154107438],{\n\n/***/ 3668:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>ウェイトの仕方にもよるけど、大抵 DirectX とか使う羽目になります。 正確に同じウェイトを刻むとすると、DOS では(相当外道な方法を使わない限り)無理ですね。 一応簡単なウェイトの取り方を幾つか調べて列挙してみました。</p>\\n<h2>forループによる空回り</h2>\\n<p>たとえばこんなやつ。</p>\\n<pre><code class=\\\"language-C\\\">for(int i=0;i&#x3C;10000;i++);\\n</code></pre>\\n<p>一番お手軽だけど、遅い PC と早い PC でウェイトの量に差がついてしまうし、コンパイラの最適化によって丸々消される可能性もあるので、これは使い物にならない。</p>\\n<h2><code>time()</code> 関数を使う</h2>\\n<p>時刻を常に監視して、時刻が変わらない間延々とループし続ける方法。DOS でも確実にどの PC でも同じ時間だけ正確なウェイトが刻めるが、1 秒未満のウェイトを取ることが出来ない。(最低でも1秒)</p>\\n<h2><code>Sleep()</code> 関数を使う</h2>\\n<p>Windows のタイマーを使ってミリ秒単位でプログラム(スレッド)を眠らせる。一見 1 ミリ秒単位で止めることが出来て理想かもしれないが、このタイマーは思ったより正確ではなく、最大 50 ミリ秒近いズレが生じる上、DOS では動かない。 とりあえずお手軽にできるウェイトの取り方といったらこの程度かな</p>\",\"frontmatter\":{\"cover\":null,\"date\":\"2003-12-09T17:27:00+09:00\",\"strDate\":\"2003/12/9\",\"title\":\"具体的なウェイトのとり方\"}}},\"pathContext\":{\"path\":\"/ja/blog/2003/12/09-具体的なウェイトの捕り方/\",\"langKey\":\"ja\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---ja-blog-2003-12-09-具体的なウェイトの捕り方-5992929bb5c3fd93cd24.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>ウェイトの仕方にもよるけど、大抵 DirectX とか使う羽目になります。 正確に同じウェイトを刻むとすると、DOS では(相当外道な方法を使わない限り)無理ですね。 一応簡単なウェイトの取り方を幾つか調べて列挙してみました。</p>\\n<h2>forループによる空回り</h2>\\n<p>たとえばこんなやつ。</p>\\n<pre><code class=\\\"language-C\\\">for(int i=0;i&#x3C;10000;i++);\\n</code></pre>\\n<p>一番お手軽だけど、遅い PC と早い PC でウェイトの量に差がついてしまうし、コンパイラの最適化によって丸々消される可能性もあるので、これは使い物にならない。</p>\\n<h2><code>time()</code> 関数を使う</h2>\\n<p>時刻を常に監視して、時刻が変わらない間延々とループし続ける方法。DOS でも確実にどの PC でも同じ時間だけ正確なウェイトが刻めるが、1 秒未満のウェイトを取ることが出来ない。(最低でも1秒)</p>\\n<h2><code>Sleep()</code> 関数を使う</h2>\\n<p>Windows のタイマーを使ってミリ秒単位でプログラム(スレッド)を眠らせる。一見 1 ミリ秒単位で止めることが出来て理想かもしれないが、このタイマーは思ったより正確ではなく、最大 50 ミリ秒近いズレが生じる上、DOS では動かない。 とりあえずお手軽にできるウェイトの取り方といったらこの程度かな</p>\",\"frontmatter\":{\"cover\":null,\"date\":\"2003-12-09T17:27:00+09:00\",\"strDate\":\"2003/12/9\",\"title\":\"具体的なウェイトのとり方\"}}},\"pathContext\":{\"path\":\"/ja/blog/2003/12/09-具体的なウェイトの捕り方/\",\"langKey\":\"ja\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/ja-blog-2003-12-09-具体的なウェイトの捕り方.json\n// module id = 3668\n// module chunks = 239825154107438"],"sourceRoot":""}