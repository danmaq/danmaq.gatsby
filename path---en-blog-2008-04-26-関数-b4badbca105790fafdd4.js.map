{"version":3,"sources":["webpack:///path---en-blog-2008-04-26-関数-b4badbca105790fafdd4.js","webpack:///./.cache/json/en-blog-2008-04-26-関数.json"],"names":["webpackJsonp","3270","module","exports","data","markdownRemark","html","frontmatter","cover","date","strDate","title","pathContext","path","langKey"],"mappings":"AAAAA,cAAc,gBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,27DAA8nDC,aAAmVC,MAAA,KAAAC,KAAA,4BAAAC,QAAA,YAAAC,MAAA,cAA2FC,aAAgBC,KAAA,0BAAAC,QAAA","file":"path---en-blog-2008-04-26-関数-b4badbca105790fafdd4.js","sourcesContent":["webpackJsonp([10460031138321],{\n\n/***/ 3270:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>naming</h2>\\n<p><code>function FuncHoge(){} function UltimateLongNameFunc(){}</code></p>\\n<ul>\\n<li>\\n<p>As in java and Lua, do not start with lowercase letters at the beginning, we recommend uppercase letters for the first letter.</p>\\n</li>\\n<li>\\n<p>Avoid all lower case letters as much as possible.</p>\\n<h2>call</h2>\\n</li>\\n</ul>\\n<p><code>let foo = func();</code></p>\\n<ul>\\n<li>\\n<p><em>Do not skip () even if the argument is clearly empty</em> . (Because it tends to judge whether it is a function or a variable)</p>\\n</li>\\n<li>\\n<p>[Can] However, in the case of a built-in instruction (≠ built-in function), that is not the case.</p>\\n<h2>Implementation (single row)</h2>\\n</li>\\n</ul>\\n<p><code>function Foo(){ hoge(); }</code></p>\\n<ul>\\n<li>\\n<p><em>Do not skip () even if the argument is clearly empty</em> .</p>\\n</li>\\n<li>\\n<p><em>Do not omit the <code>;</code> at the end of the function even if it is only one line</em> .</p>\\n<h2>Implementation (multiple lines)</h2>\\n</li>\\n</ul>\\n<p><code>function Foo(){ hoge(); hoge(); }</code></p>\\n<ul>\\n<li>\\n<p><em>Pay attention to the position of curly brackets</em> .</p>\\n</li>\\n<li>\\n<p>As much as possible to fit within 30 lines of function.</p>\\n<h2>Argument definition</h2>\\n</li>\\n</ul>\\n<p><code>// BEFORE function Func(let foo,let baz){return (foo+baz)*3;} // AFTER function Func( let foo, let baz ){ return ( foo + baz ) * 3; }</code></p>\\n<ul>\\n<li>\\n<p>Let's make room as much as possible.</p>\\n<h2>Example of line feed when it is long</h2>\\n</li>\\n</ul>\\n<p><code>function SuperLongNameFunction( let too, let manymany, let param ){ TooLongNameFunction( too, many, param ); }</code></p>\\n<ul>\\n<li>Line break to 160 to 192 characters per line.</li>\\n<li>[Can] It is ant to line break at about 72 to 80 letters when extremely loss of human readability.</li>\\n<li>Do not omit the let of the argument even if it is long.</li>\\n<li>1 Function To divide function from about 50 lines beyond.</li>\\n</ul>\",\"frontmatter\":{\"cover\":null,\"date\":\"2008-04-26T00:00:08+09:00\",\"strDate\":\"2008/4/25\",\"title\":\"function\"}}},\"pathContext\":{\"path\":\"/en/blog/2008/04/26-関数/\",\"langKey\":\"en\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---en-blog-2008-04-26-関数-b4badbca105790fafdd4.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>naming</h2>\\n<p><code>function FuncHoge(){} function UltimateLongNameFunc(){}</code></p>\\n<ul>\\n<li>\\n<p>As in java and Lua, do not start with lowercase letters at the beginning, we recommend uppercase letters for the first letter.</p>\\n</li>\\n<li>\\n<p>Avoid all lower case letters as much as possible.</p>\\n<h2>call</h2>\\n</li>\\n</ul>\\n<p><code>let foo = func();</code></p>\\n<ul>\\n<li>\\n<p><em>Do not skip () even if the argument is clearly empty</em> . (Because it tends to judge whether it is a function or a variable)</p>\\n</li>\\n<li>\\n<p>[Can] However, in the case of a built-in instruction (≠ built-in function), that is not the case.</p>\\n<h2>Implementation (single row)</h2>\\n</li>\\n</ul>\\n<p><code>function Foo(){ hoge(); }</code></p>\\n<ul>\\n<li>\\n<p><em>Do not skip () even if the argument is clearly empty</em> .</p>\\n</li>\\n<li>\\n<p><em>Do not omit the <code>;</code> at the end of the function even if it is only one line</em> .</p>\\n<h2>Implementation (multiple lines)</h2>\\n</li>\\n</ul>\\n<p><code>function Foo(){ hoge(); hoge(); }</code></p>\\n<ul>\\n<li>\\n<p><em>Pay attention to the position of curly brackets</em> .</p>\\n</li>\\n<li>\\n<p>As much as possible to fit within 30 lines of function.</p>\\n<h2>Argument definition</h2>\\n</li>\\n</ul>\\n<p><code>// BEFORE function Func(let foo,let baz){return (foo+baz)*3;} // AFTER function Func( let foo, let baz ){ return ( foo + baz ) * 3; }</code></p>\\n<ul>\\n<li>\\n<p>Let's make room as much as possible.</p>\\n<h2>Example of line feed when it is long</h2>\\n</li>\\n</ul>\\n<p><code>function SuperLongNameFunction( let too, let manymany, let param ){ TooLongNameFunction( too, many, param ); }</code></p>\\n<ul>\\n<li>Line break to 160 to 192 characters per line.</li>\\n<li>[Can] It is ant to line break at about 72 to 80 letters when extremely loss of human readability.</li>\\n<li>Do not omit the let of the argument even if it is long.</li>\\n<li>1 Function To divide function from about 50 lines beyond.</li>\\n</ul>\",\"frontmatter\":{\"cover\":null,\"date\":\"2008-04-26T00:00:08+09:00\",\"strDate\":\"2008/4/25\",\"title\":\"function\"}}},\"pathContext\":{\"path\":\"/en/blog/2008/04/26-関数/\",\"langKey\":\"en\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/en-blog-2008-04-26-関数.json\n// module id = 3270\n// module chunks = 10460031138321"],"sourceRoot":""}