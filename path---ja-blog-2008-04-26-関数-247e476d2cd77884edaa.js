webpackJsonp([0x6251ceffe925],{4248:function(n,o){n.exports={data:{markdownRemark:{html:"<h2>命名</h2>\n<p><code>function FuncHoge(){} function UltimateLongNameFunc(){}</code></p>\n<ul>\n<li>javaやLuaのように先頭は強制小文字とかはせず、先頭文字は大文字を推奨する。</li>\n<li>\n<p>全小文字は極力避ける。</p>\n<h2>呼び出し</h2>\n</li>\n</ul>\n<p><code>let foo = func();</code></p>\n<ul>\n<li><em>引数が明らかに空でも()は省略しないこと</em>。(それが関数なのか変数なのか判断しかねやすいため)</li>\n<li>\n<p>[Can]ただし組み込み命令(≠組み込み関数)の場合、その限りではない。</p>\n<h2>実装(単一行)</h2>\n</li>\n</ul>\n<p><code>function Foo(){ hoge(); }</code></p>\n<ul>\n<li><em>引数が明らかに空でも()は省略しないこと</em>。</li>\n<li>\n<p><em>1行のみの場合でも関数の終わりに<code>;</code>を省略しないこと</em>。</p>\n<h2>実装(複数行)</h2>\n</li>\n</ul>\n<p><code>function Foo(){ hoge(); hoge(); }</code></p>\n<ul>\n<li><em>中括弧の位置に注意すること</em>。</li>\n<li>\n<p>なるべく1関数30行以内に収めるようにする。</p>\n<h2>引数の定義</h2>\n</li>\n</ul>\n<p><code>// BEFORE function Func(let foo,let baz){return (foo+baz)*3;} // AFTER function Func( let foo, let baz ){ return ( foo + baz ) * 3; }</code></p>\n<ul>\n<li>\n<p>なるべくスペースを空けるようにしよう。</p>\n<h2>長い場合の改行例</h2>\n</li>\n</ul>\n<p><code>function SuperLongNameFunction( let too, let manymany, let param ){ TooLongNameFunction( too, many, param ); }</code></p>\n<ul>\n<li>1行160～192文字を限度に改行する。</li>\n<li>[Can]極端に可読性を損ねる場合は72～80文字程度で改行するのもアリ。</li>\n<li>長くても引数のletは省略しない。</li>\n<li>1関数50行を超えた辺りから関数の分割を考えるようにする。</li>\n</ul>",frontmatter:{cover:null,date:"2008-04-26T00:00:08+09:00",strDate:"2008/4/25",title:"関数"}}},pathContext:{path:"/ja/blog/2008/04/26-関数/",langKey:"ja"}}}});
//# sourceMappingURL=path---ja-blog-2008-04-26-関数-247e476d2cd77884edaa.js.map